//! Types for parsing superkeys.

use std::str::FromStr;

use winnow::{
    ModalResult, Parser,
    ascii::{dec_uint, space1},
    combinator::{repeat, terminated},
};

/// Error when parsing a superkeys map..
#[derive(Clone, Debug, Display, Error, From)]
#[display("{_0}")]
pub struct ParseSuperkeysMapError(#[error(not(source))] String);

/// Struct containing a list of defined superkeys.
pub struct RawSuperkeysMap(pub Vec<RawSuperKey>);

impl FromStr for RawSuperkeysMap {
    type Err = ParseSuperkeysMapError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let map = super_keys_parser
            .parse(s)
            .map_err(|err| ParseSuperkeysMapError(err.to_string()))?;

        Ok(Self(map))
    }
}

/// Superkey containing uninterpreted actions.
pub struct RawSuperKey {
    /// Action performed when tapping the key.
    pub tap: Option<u16>,
    /// Action performed when holding the key.
    pub hold: Option<u16>,
    /// Action performed when double tapping the key.
    pub double_tap: Option<u16>,
    /// Action performed when tapping and holding the key.
    pub tap_hold: Option<u16>,
    /// Action performed when double tapping and holding the key.
    pub double_tap_hold: Option<u16>,
}

fn super_keys_parser(input: &mut &str) -> ModalResult<Vec<RawSuperKey>> {
    let superkey_map = repeat(1.., terminated(super_key_parser, "0 0 ")).parse_next(input)?;

    let _: Vec<_> = repeat(.., "65535 ").parse_next(input)?;

    Ok(superkey_map)
}

fn super_key_parser(input: &mut &str) -> ModalResult<RawSuperKey> {
    let (tap, hold, double_tap, tap_hold, double_tap_hold) = (
        superkey_action_parser,
        superkey_action_parser,
        superkey_action_parser,
        superkey_action_parser,
        superkey_action_parser,
    )
        .parse_next(input)?;

    Ok(RawSuperKey {
        tap,
        hold,
        double_tap,
        tap_hold,
        double_tap_hold,
    })
}

fn superkey_action_parser(input: &mut &str) -> ModalResult<Option<u16>> {
    let (action, _) = (dec_uint, space1).parse_next(input)?;

    Ok((action == 1).then_some(action))
}

#[cfg(test)]
mod tests {
    use super::*;

    const SUPERKEY_DATA: &str = "262 281 1 1 1 0 0 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 ";

    #[test]
    fn parse_succeeds() {
        let _ = SUPERKEY_DATA.parse::<RawSuperkeysMap>().unwrap();
    }
}
